// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recipify.Data;

#nullable disable

namespace Recipify.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Recipify.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Brunch"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lunch"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dinner"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dessert"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Salads"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Soups"
                        });
                });

            modelBuilder.Entity("Recipify.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "John Soy",
                            Content = "This recipe is amazing!",
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Author = "Jane Smith",
                            Content = "I love this dish!",
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Author = "Alice Johnson",
                            Content = "Not my favorite, but still good.",
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Author = "Trey Looh",
                            Content = "Good recipe. You can add move vegetables for better taste.",
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 5,
                            Author = "Kate Waing",
                            Content = "So delisious! Me and my family loves this pancakes recipe!",
                            RecipeId = 3
                        });
                });

            modelBuilder.Entity("Recipify.Data.Models.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("Recipify.Data.Models.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cuisines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Indian"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mexican"
                        },
                        new
                        {
                            Id = 5,
                            Name = "French"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bulgarian"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Turkish"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Balkan"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Greek"
                        });
                });

            modelBuilder.Entity("Recipify.Data.Models.DifficultyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            Level = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Level = "Hard"
                        });
                });

            modelBuilder.Entity("Recipify.Data.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Spaghetti",
                            Quantity = "200g",
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Eggs",
                            Quantity = "2 large",
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pancetta",
                            Quantity = "100g",
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Parmesan cheese",
                            Quantity = "50g grated",
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Black pepper",
                            Quantity = "to taste",
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chicken",
                            Quantity = "500g, cut into pieces",
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Onion",
                            Quantity = "1 large, chopped",
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Garlic",
                            Quantity = "2 cloves, minced",
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ginger",
                            Quantity = "1 inch, grated",
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Curry powder",
                            Quantity = "2 tablespoons",
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Coconut milk",
                            Quantity = "400ml",
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Salt",
                            Quantity = "to taste",
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 13,
                            Name = "Flour",
                            Quantity = "1 cup",
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 14,
                            Name = "Sugar",
                            Quantity = "2 tablespoons",
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 15,
                            Name = "Baking powder",
                            Quantity = "1 tablespoon",
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 16,
                            Name = "Salt",
                            Quantity = "1/2 teaspoon",
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 17,
                            Name = "Milk",
                            Quantity = "1 cup",
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 18,
                            Name = "Oil",
                            Quantity = "2 tablespoons",
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 19,
                            Name = "Egg",
                            Quantity = "1 large",
                            RecipeId = 3
                        });
                });

            modelBuilder.Entity("Recipify.Data.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CuisineId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CuisineId");

                    b.HasIndex("DifficultyId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CuisineId = 1,
                            Description = "A classic Italian pasta dish made with eggs, cheese, pancetta, and pepper.",
                            DifficultyId = 1,
                            ImageUrl = "https://leonardobansko.bg/wp-content/uploads/2020/08/2020-08-26_15h07_08.png",
                            Instructions = "Cook spaghetti. In a bowl, mix eggs and cheese. Fry pancetta. Combine all with pepper.",
                            IsDeleted = false,
                            Title = "Spaghetti Carbonara"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CuisineId = 2,
                            Description = "A spicy and flavorful chicken dish cooked in a rich curry sauce.",
                            DifficultyId = 2,
                            ImageUrl = "https://gotvach.bg/files/lib/400x296/curry-chicken1.webp",
                            Instructions = "Sauté onions, garlic, and ginger. Add spices and chicken. Simmer in coconut milk.",
                            IsDeleted = false,
                            Title = "Chicken Curry"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CuisineId = 9,
                            Description = "Easy homemade recipe for thick, fluffy and delicious pancakes.",
                            DifficultyId = 1,
                            ImageUrl = "https://www.whiskware.com/cdn/shop/articles/yagv0pn15omlwkgpgrbk.jpg?v=1617665208&width=2000",
                            Instructions = "Combine flour, sugar, baking powder, and salt in a large bowl. Make a well in the center, and pour in milk, oil, and egg. Mix until smooth.Heat a lightly oiled griddle or frying pan over medium-high heat. Pour or scoop batter onto the griddle. Cook until bubbles form and the edges are dry, 1 to 2 minutes. Flip and cook until browned on the other side. ",
                            IsDeleted = false,
                            Title = "Pancakes"
                        });
                });

            modelBuilder.Entity("Recipify.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin123.gmail.com",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "adi23@mail.com",
                            Username = "adi23"
                        },
                        new
                        {
                            Id = 3,
                            Email = "gosho1gosho@gmail.com",
                            Username = "gosho45"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recipify.Data.Models.Comment", b =>
                {
                    b.HasOne("Recipify.Data.Models.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Recipify.Data.Models.Ingredient", b =>
                {
                    b.HasOne("Recipify.Data.Models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Recipify.Data.Models.Recipe", b =>
                {
                    b.HasOne("Recipify.Data.Models.Category", "Category")
                        .WithMany("Recipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipify.Data.Models.Cuisine", "Cuisine")
                        .WithMany("Recipes")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipify.Data.Models.DifficultyLevel", "Difficulty")
                        .WithMany("Recipes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Cuisine");

                    b.Navigation("Difficulty");
                });

            modelBuilder.Entity("Recipify.Data.Models.Category", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Recipify.Data.Models.Cuisine", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Recipify.Data.Models.DifficultyLevel", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Recipify.Data.Models.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
